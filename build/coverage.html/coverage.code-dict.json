{"/home/travis/build/npmtest/node-npmtest-zmq/test.js":"/* istanbul instrument in package npmtest_zmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zmq/lib.npmtest_zmq.js":"/* istanbul instrument in package npmtest_zmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_zmq = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_zmq = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-zmq/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-zmq && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_zmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_zmq\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_zmq.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_zmq.rollup.js'] =\n            local.assetsDict['/assets.npmtest_zmq.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_zmq.__dirname + '/lib.npmtest_zmq.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/index.js":"\nmodule.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/lib/index.js":"/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter\n  , zmq = require('bindings')('zmq.node')\n  , util = require('util');\n\n/**\n * Expose bindings as the module.\n */\n\nexports = module.exports = zmq;\n\n/**\n * Expose zmq version.\n */\n\nexports.version = zmq.zmqVersion();\n\n/**\n * Expose zmq_curve_keypair\n */\n\nexports.curveKeypair = zmq.zmqCurveKeypair;\n\n/**\n * Map of socket types.\n */\n\nvar types = exports.types = {\n    pub: zmq.ZMQ_PUB\n  , xpub: zmq.ZMQ_XPUB\n  , sub: zmq.ZMQ_SUB\n  , xsub: zmq.ZMQ_XSUB\n  , req: zmq.ZMQ_REQ\n  , xreq: zmq.ZMQ_XREQ\n  , rep: zmq.ZMQ_REP\n  , xrep: zmq.ZMQ_XREP\n  , push: zmq.ZMQ_PUSH\n  , pull: zmq.ZMQ_PULL\n  , dealer: zmq.ZMQ_DEALER\n  , router: zmq.ZMQ_ROUTER\n  , pair: zmq.ZMQ_PAIR\n  , stream: zmq.ZMQ_STREAM\n};\n\nvar longOptions = {\n    ZMQ_HWM: 1\n  , ZMQ_SWAP: 3\n  , ZMQ_AFFINITY: 4\n  , ZMQ_IDENTITY: 5\n  , ZMQ_SUBSCRIBE: 6\n  , ZMQ_UNSUBSCRIBE: 7\n  , ZMQ_RATE: 8\n  , ZMQ_RECOVERY_IVL: 9\n  , ZMQ_MCAST_LOOP: 10\n  , ZMQ_SNDBUF: 11\n  , ZMQ_RCVBUF: 12\n  , ZMQ_RCVMORE: 13\n  , ZMQ_FD: 14\n  , ZMQ_EVENTS: 15\n  , ZMQ_TYPE: 16\n  , ZMQ_LINGER: 17\n  , ZMQ_RECONNECT_IVL: 18\n  , ZMQ_BACKLOG: 19\n  , ZMQ_RECOVERY_IVL_MSEC: 20\n  , ZMQ_RECONNECT_IVL_MAX: 21\n  , ZMQ_MAXMSGSIZE: 22\n  , ZMQ_SNDHWM: 23\n  , ZMQ_RCVHWM: 24\n  , ZMQ_MULTICAST_HOPS: 25\n  , ZMQ_RCVTIMEO: 27\n  , ZMQ_SNDTIMEO: 28\n  , ZMQ_IPV4ONLY: 31\n  , ZMQ_LAST_ENDPOINT: 32\n  , ZMQ_ROUTER_MANDATORY: 33\n  , ZMQ_TCP_KEEPALIVE: 34\n  , ZMQ_TCP_KEEPALIVE_CNT: 35\n  , ZMQ_TCP_KEEPALIVE_IDLE: 36\n  , ZMQ_TCP_KEEPALIVE_INTVL: 37\n  , ZMQ_TCP_ACCEPT_FILTER: 38\n  , ZMQ_DELAY_ATTACH_ON_CONNECT: 39\n  , ZMQ_XPUB_VERBOSE: 40\n  , ZMQ_ROUTER_RAW: 41\n  , ZMQ_IPV6: 42\n  , ZMQ_MECHANISM: 43\n  , ZMQ_PLAIN_SERVER: 44\n  , ZMQ_PLAIN_USERNAME: 45\n  , ZMQ_PLAIN_PASSWORD: 46\n  , ZMQ_CURVE_SERVER: 47\n  , ZMQ_CURVE_PUBLICKEY: 48\n  , ZMQ_CURVE_SECRETKEY: 49\n  , ZMQ_CURVE_SERVERKEY: 50\n  , ZMQ_ZAP_DOMAIN: 55\n  , ZMQ_IO_THREADS: 1\n  , ZMQ_MAX_SOCKETS: 2\n};\n\nObject.keys(longOptions).forEach(function(name){\n  Object.defineProperty(zmq, name, {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: longOptions[name]\n  });\n});\n\n/**\n * Map of socket options.\n */\n\nvar opts = exports.options = {\n    _fd: zmq.ZMQ_FD\n  , _ioevents: zmq.ZMQ_EVENTS\n  , _receiveMore: zmq.ZMQ_RCVMORE\n  , _subscribe: zmq.ZMQ_SUBSCRIBE\n  , _unsubscribe: zmq.ZMQ_UNSUBSCRIBE\n  , affinity: zmq.ZMQ_AFFINITY\n  , backlog: zmq.ZMQ_BACKLOG\n  , hwm: zmq.ZMQ_HWM\n  , identity: zmq.ZMQ_IDENTITY\n  , linger: zmq.ZMQ_LINGER\n  , mcast_loop: zmq.ZMQ_MCAST_LOOP\n  , rate: zmq.ZMQ_RATE\n  , rcvbuf: zmq.ZMQ_RCVBUF\n  , last_endpoint: zmq.ZMQ_LAST_ENDPOINT\n  , reconnect_ivl: zmq.ZMQ_RECONNECT_IVL\n  , recovery_ivl: zmq.ZMQ_RECOVERY_IVL\n  , sndbuf: zmq.ZMQ_SNDBUF\n  , swap: zmq.ZMQ_SWAP\n  , mechanism: zmq.ZMQ_MECHANISM\n  , plain_server: zmq.ZMQ_PLAIN_SERVER\n  , plain_username: zmq.ZMQ_PLAIN_USERNAME\n  , plain_password: zmq.ZMQ_PLAIN_PASSWORD\n  , curve_server: zmq.ZMQ_CURVE_SERVER\n  , curve_publickey: zmq.ZMQ_CURVE_PUBLICKEY\n  , curve_secretkey: zmq.ZMQ_CURVE_SECRETKEY\n  , curve_serverkey: zmq.ZMQ_CURVE_SERVERKEY\n  , zap_domain: zmq.ZMQ_ZAP_DOMAIN\n};\n\n/**\n *  Monitor events\n */\nvar events = exports.events = {\n    1:   \"connect\"       // zmq.ZMQ_EVENT_CONNECTED\n  , 2:   \"connect_delay\" // zmq.ZMQ_EVENT_CONNECT_DELAYED\n  , 4:   \"connect_retry\" // zmq.ZMQ_EVENT_CONNECT_RETRIED\n  , 8:   \"listen\"        // zmq.ZMQ_EVENT_LISTENING\n  , 16:  \"bind_error\"    // zmq.ZMQ_EVENT_BIND_FAILED\n  , 32:  \"accept\"        // zmq.ZMQ_EVENT_ACCEPTED\n  , 64:  \"accept_error\"  // zmq.ZMQ_EVENT_ACCEPT_FAILED\n  , 128: \"close\"         // zmq.ZMQ_EVENT_CLOSED\n  , 256: \"close_error\"   // zmq.ZMQ_EVENT_CLOSE_FAILED\n  , 512: \"disconnect\"    // zmq.ZMQ_EVENT_DISCONNECTED\n}\n\n// Context management happens here. We lazily initialize a default context,\n// and use that everywhere. Also cleans up on exit.\nvar ctx;\nfunction defaultContext() {\n  if (ctx) return ctx;\n\n  var io_threads = 1;\n  if (process.env.ZMQ_IO_THREADS) {\n    io_threads = parseInt(process.env.ZMQ_IO_THREADS, 10);\n    if (!io_threads || io_threads < 1) {\n      console.warn('Invalid number in ZMQ_IO_THREADS, using 1 IO thread.');\n      io_threads = 1;\n    }\n  }\n\n  ctx = new zmq.Context(io_threads);\n  process.on('exit', function(){\n    // ctx.close();\n    ctx = null;\n  });\n\n  return ctx;\n};\n\n/**\n * A batch consists of 1 or more message parts with their flags that need to be sent as one unit\n */\n\nfunction OutBatch() {\n  this.content = [];      // buf, flags, buf, flags, ...\n  this.cbs = [];          // callbacks\n  this.isClosed = false;  // true if the last message does not have SNDMORE in its flags, false otherwise\n  this.next = null;       // next batch (for linked list of batches)\n}\n\nOutBatch.prototype.append = function (buf, flags, cb) {\n  if (!Buffer.isBuffer(buf)) {\n    buf = new Buffer(String(buf), 'utf8');\n  }\n\n  this.content.push(buf, flags);\n\n  if (cb) {\n    this.cbs.push(cb);\n  }\n\n  if ((flags & zmq.ZMQ_SNDMORE) === 0) {\n    this.isClosed = true;\n  }\n};\n\nOutBatch.prototype.invokeError = function (socket, error) {\n  var returned = false;\n  for (var i = 0; i < this.cbs.length; i += 1) {\n    this.cbs[i].call(socket, error);\n    returned = true;\n  }\n\n  if (!returned) {\n    throw error;\n  }\n};\n\nOutBatch.prototype.invokeSent = function (socket) {\n  for (var i = 0; i < this.cbs.length; i += 1) {\n    this.cbs[i].call(socket);\n  }\n};\n\n\nfunction BatchList() {\n  this.firstBatch = null;\n  this.lastBatch = null;\n  this.length = 0;\n}\n\nBatchList.prototype.canSend = function () {\n  return this.firstBatch ? this.firstBatch.isClosed : false;\n};\n\nBatchList.prototype.append = function (buf, flags, cb) {\n  var batch = this.lastBatch;\n\n  if (!batch || batch.isClosed) {\n    batch = new OutBatch();\n\n    if (this.lastBatch) {\n      this.lastBatch.next = batch;\n    }\n\n    this.lastBatch = batch;\n\n    if (!this.firstBatch) {\n      this.firstBatch = batch;\n    }\n\n    this.length += 1;\n  }\n\n  batch.append(buf, flags, cb);\n};\n\nBatchList.prototype.fetch = function () {\n  var batch = this.firstBatch;\n  if (batch && batch.isClosed) {\n    this.firstBatch = batch.next;\n    this.length -= 1;\n    return batch;\n  }\n  return undefined;\n};\n\nBatchList.prototype.restore = function (batch) {\n  this.firstBatch = batch;\n  this.length += 1;\n};\n\n\n/**\n * Create a new socket of the given `type`.\n *\n * @constructor\n * @param {String|Number} type\n * @api public\n */\n\nvar Socket =\nexports.Socket = function (type) {\n  var self = this;\n  EventEmitter.call(this);\n  this.type = type;\n  this._zmq = new zmq.SocketBinding(defaultContext(), types[type]);\n  this._paused = false;\n  this._isFlushingReads = false;\n  this._isFlushingWrites = false;\n  this._outgoing = new BatchList();\n\n  this._zmq.onReadReady = function () {\n    self._flushReads();\n  };\n\n  this._zmq.onSendReady = function () {\n    self._flushWrites();\n  };\n};\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nutil.inherits(Socket, EventEmitter);\n\n/**\n * Set socket to pause mode\n * no data will be emit until resume() is called\n * all send() calls will be queued\n *\n * @api public\n */\n\nSocket.prototype.pause = function() {\n  this._paused = true;\n}\n\n/**\n * Set a socket back to normal work mode\n *\n * @api public\n */\n\nSocket.prototype.resume = function() {\n  this._paused = false;\n  this._flushReads();\n  this._flushWrites();\n}\n\nSocket.prototype.ref = function() {\n  this._zmq.ref();\n}\n\nSocket.prototype.unref = function() {\n  this._zmq.unref();\n}\n\nSocket.prototype.read = function() {\n  var message = [], flags;\n\n  if (this._zmq.state !== zmq.STATE_READY) {\n    return null;\n  }\n\n  flags = this._zmq.getsockopt(zmq.ZMQ_EVENTS);\n\n  if (flags & zmq.ZMQ_POLLIN) {\n    do {\n      message.push(this._zmq.recv());\n    } while (this._zmq.getsockopt(zmq.ZMQ_RCVMORE));\n\n    return message;\n  }\n\n  return null;\n}\n\n\n/**\n * Set `opt` to `val`.\n *\n * @param {String|Number} opt\n * @param {Mixed} val\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.setsockopt = function(opt, val){\n  this._zmq.setsockopt(opts[opt] || opt, val);\n  return this;\n};\n\n/**\n * Get socket `opt`.\n *\n * @param {String|Number} opt\n * @return {Mixed}\n * @api public\n */\n\nSocket.prototype.getsockopt = function(opt){\n  return this._zmq.getsockopt(opts[opt] || opt);\n};\n\n/**\n * Socket opt accessors allowing `sock.backlog = val`\n * instead of `sock.setsockopt('backlog', val)`.\n */\n\nObject.keys(opts).forEach(function(name){\n  Socket.prototype.__defineGetter__(name, function() {\n    return this._zmq.getsockopt(opts[name]);\n  });\n\n  Socket.prototype.__defineSetter__(name, function(val) {\n    if ('string' == typeof val) val = new Buffer(val, 'utf8');\n    return this._zmq.setsockopt(opts[name], val);\n  });\n});\n\n/**\n * Async bind.\n *\n * Emits the \"bind\" event.\n *\n * @param {String} addr\n * @param {Function} cb\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.bind = function(addr, cb) {\n  var self = this;\n  this._zmq.bind(addr, function(err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    self._flushReads();\n    self._flushWrites();\n\n    self.emit('bind', addr);\n    cb && cb();\n  });\n  return this;\n};\n\n/**\n * Sync bind.\n *\n * @param {String} addr\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.bindSync = function(addr) {\n  this._zmq.bindSync(addr);\n\n  return this;\n};\n\n/**\n * Async unbind.\n *\n * Emits the \"unbind\" event.\n *\n * @param {String} addr\n * @param {Function} cb\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.unbind = function(addr, cb) {\n  if (zmq.ZMQ_CAN_UNBIND) {\n    var self = this;\n    this._zmq.unbind(addr, function(err) {\n      if (err) {\n        return cb && cb(err);\n      }\n      self.emit('unbind', addr);\n\n      self._flushReads();\n      self._flushWrites();\n      cb && cb();\n    });\n  } else {\n    cb && cb();\n  }\n  return this;\n};\n\n/**\n * Sync unbind.\n *\n * @param {String} addr\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.unbindSync = function(addr) {\n  if (zmq.ZMQ_CAN_UNBIND) {\n    this._zmq.unbindSync(addr);\n  }\n  return this;\n}\n\n/**\n * Connect to `addr`.\n *\n * @param {String} addr\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.connect = function(addr) {\n  this._zmq.connect(addr);\n  return this;\n};\n\n/**\n * Disconnect from `addr`.\n *\n * @param {String} addr\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.disconnect = function(addr) {\n  if (zmq.ZMQ_CAN_DISCONNECT) {\n    this._zmq.disconnect(addr);\n  }\n  return this;\n};\n\n/**\n * Enable monitoring of a Socket\n *\n * @param {Number} timer interval in ms > 0 or Undefined for default\n * @param {Number} The maximum number of events to read on each interval, default is 1, use 0 for reading all events\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.monitor = function(interval, numOfEvents) {\n  if (zmq.ZMQ_CAN_MONITOR) {\n    var self = this;\n\n    self._zmq.onMonitorEvent = function(event_id, event_value, event_endpoint_addr) {\n      self.emit(events[event_id], event_value, event_endpoint_addr);\n    }\n\n    self._zmq.onMonitorError = function(error) {\n      self.emit('monitor_error', error);\n    }\n\n    this._zmq.monitor(interval, numOfEvents);\n  } else {\n    throw new Error('Monitoring support disabled check zmq version is > 3.2.1 and recompile this addon');\n  }\n  return this;\n};\n\n/**\n * Disable monitoring of a Socket release idle handler\n * and close the socket\n *\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.unmonitor = function() {\n  if (zmq.ZMQ_CAN_MONITOR) {\n    this._zmq.unmonitor();\n  }\n  return this;\n};\n\n\n/**\n * Subscribe with the given `filter`.\n *\n * @param {String} filter\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.subscribe = function(filter) {\n  this._subscribe = filter;\n  return this;\n};\n\n/**\n * Unsubscribe with the given `filter`.\n *\n * @param {String} filter\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.unsubscribe = function(filter) {\n  this._unsubscribe = filter;\n  return this;\n};\n\n\n/**\n * Send the given `msg`.\n *\n * @param {String|Buffer|Array} msg\n * @param {Number} [flags]\n * @param {Function} [cb]\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.send = function(msg, flags, cb) {\n  flags = flags | 0;\n\n  if (Array.isArray(msg)) {\n    for (var i = 0, len = msg.length; i < len; i++) {\n      var isLast = i === len - 1;\n      var msgFlags = isLast ? flags : flags | zmq.ZMQ_SNDMORE;\n      var callback = isLast ? cb : undefined;\n\n      this._outgoing.append(msg[i], msgFlags, callback);\n    }\n  } else {\n    this._outgoing.append(msg, flags, cb);\n  }\n\n  if (this._outgoing.canSend()) {\n    this._zmq.pending = true;\n    this._flushWrites();\n  } else {\n    this._zmq.pending = false;\n  }\n\n  return this;\n};\n\n\nSocket.prototype._flushRead = function () {\n  var message = this._zmq.readv(); // can throw\n  if (!message) {\n    return false;\n  }\n\n  // Handle received message immediately to prevent memory leak in driver\n  if (message.length === 1) {\n    // hot path\n    this.emit('message', message[0]);\n  } else {\n    this.emit.apply(this, ['message'].concat(message));\n  }\n  return true;\n};\n\nSocket.prototype._flushWrite = function () {\n  var batch = this._outgoing.fetch();\n  if (!batch) {\n    this._zmq.pending = false;\n    return false;\n  }\n\n  try {\n    if (this._zmq.sendv(batch.content)) {\n      this._zmq.pending = this._outgoing.canSend();\n      batch.invokeSent(this);\n      return true;\n    }\n\n    this._outgoing.restore(batch);\n    return false;\n  } catch (sendError) {\n    this._zmq.pending = this._outgoing.canSend();\n    batch.invokeError(this, sendError); // can throw\n    return false;\n  }\n};\n\n\nSocket.prototype._flushReads = function() {\n  if (this._paused || this._isFlushingReads) return;\n\n  this._isFlushingReads = true;\n\n  var received;\n\n  do {\n    try {\n      received = this._flushRead();\n    } catch (error) {\n      this._isFlushingReads = false;\n      this.emit('error', error); // can throw\n      return;\n    }\n  } while (received);\n\n  this._isFlushingReads = false;\n\n  // if many sends happened, but ended up in the queue (eg. in a req/rep scenario where each send must be followed by a\n  // response), we can try to send again now\n\n  this._flushWrites();\n};\n\nSocket.prototype._flushWrites = function() {\n  if (this._paused || this._isFlushingWrites) return;\n\n  this._isFlushingWrites = true;\n\n  var sent;\n\n  do {\n    try {\n      sent = this._flushWrite();\n    } catch (error) {\n      this._isFlushingWrites = false;\n      this.emit('error', error); // can throw\n      return;\n    }\n  } while (sent);\n\n  this._isFlushingWrites = false;\n};\n\n/**\n * Close the socket.\n *\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.close = function() {\n  this._zmq.close();\n  return this;\n};\n\n/**\n * Create a `type` socket with the given `options`.\n *\n * @param {String} type\n * @param {Object} options\n * @return {Socket}\n * @api public\n */\n\nexports.socket =\nexports.createSocket = function(type, options) {\n  var sock = new Socket(type);\n  for (var key in options) sock[key] = options[key];\n  return sock;\n};\n\nexports.Context.setMaxThreads = function(value) {\n  if (!zmq.ZMQ_CAN_SET_CTX) {\n    throw new Error('Setting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');\n  }\n  var defaultCtx = defaultContext();\n  defaultCtx.setOpt(zmq.ZMQ_IO_THREADS, value);\n};\n\nexports.Context.getMaxThreads = function() {\n  if (!zmq.ZMQ_CAN_SET_CTX) {\n    throw new Error('Getting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');\n  }\n  var defaultCtx = defaultContext();\n  return defaultCtx.getOpt(zmq.ZMQ_IO_THREADS);\n};\n\nexports.Context.setMaxSockets = function(value) {\n  if (!zmq.ZMQ_CAN_SET_CTX) {\n    throw new Error('Setting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');\n  }\n  var defaultCtx = defaultContext();\n  defaultCtx.setOpt(zmq.ZMQ_MAX_SOCKETS, value);\n};\n\nexports.Context.getMaxSockets = function() {\n  if (!zmq.ZMQ_CAN_SET_CTX) {\n    throw new Error('Getting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');\n  }\n  var defaultCtx = defaultContext();\n  return defaultCtx.getOpt(zmq.ZMQ_MAX_SOCKETS);\n};\n\n/**\n * JS based on API characteristics of the native zmq_proxy()\n */\n\nfunction proxy (frontend, backend, capture){\n  switch(frontend.type+'/'+backend.type){\n    case 'push/pull':\n    case 'pull/push':\n    case 'xpub/xsub':\n      if(capture){\n\n        frontend.on('message',function (msg){\n          backend.send(msg);\n        });\n\n        backend.on('message',function (msg){\n          frontend.send(msg);\n\n          //forwarding messages over capture socket\n          capture.send(msg);\n        });\n\n      } else {\n\n        //no capture socket provided, just forwarding msgs to respective sockets\n        frontend.on('message',function (msg){\n          backend.send(msg);\n        });\n\n        backend.on('message',function (msg){\n          frontend.send(msg);\n        });\n\n      }\n      break;\n    case 'router/dealer':\n    case 'xrep/xreq':\n      if(capture){\n\n        //forwarding router/dealer pack signature: id, delimiter, msg\n        frontend.on('message',function (id,delimiter,msg){\n          backend.send([id,delimiter,msg]);\n        });\n\n        backend.on('message',function (id,delimiter,msg){\n          frontend.send([id,delimiter,msg]);\n\n          //forwarding message to the capture socket\n          capture.send(msg);\n        });\n\n      } else {\n\n        //forwarding router/dealer signatures without capture\n        frontend.on('message',function (id,delimiter,msg){\n          backend.send([id,delimiter,msg]);\n        });\n\n        backend.on('message',function (id,delimiter,msg){\n          frontend.send([id,delimiter,msg]);\n        });\n\n      }\n      break;\n    default:\n      throw new Error('wrong socket order to proxy');\n  }\n}\n\nexports.proxy = proxy;\n","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/perf/local_lat.js":"var zmq = require('../');\nvar assert = require('assert');\n\nif (process.argv.length != 5) {\n  console.log('usage: local_lat <bind-to> <message-size> <roundtrip-count>');\n  process.exit(1);\n}\n\nvar bind_to = process.argv[2];\nvar message_size = Number(process.argv[3]);\nvar roundtrip_count = Number(process.argv[4]);\nvar counter = 0;\n\nvar rep = zmq.socket('rep');\nrep.bindSync(bind_to);\n\nrep.on('message', function (data) {\n  assert.equal(data.length, message_size, 'message-size did not match');\n  rep.send(data);\n  if (++counter === roundtrip_count){ \n    setTimeout( function(){ \n      rep.close();\n    }, 1000); \n  }\n})\n","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/perf/local_thr.js":"var zmq = require('../');\nvar assert = require('assert');\n\nif (process.argv.length != 5) {\n  console.log('usage: local_thr <bind-to> <message-size> <message-count>');\n  process.exit(1);\n}\n\nvar bind_to = process.argv[2];\nvar message_size = Number(process.argv[3]);\nvar message_count = Number(process.argv[4]);\nvar counter = 0;\n\nvar sock = zmq.socket('pull');\nsock.bindSync(bind_to);\n\nvar timer;\n\nsock.on('message', function (data) {\n  if (!timer) {\n    console.log('started receiving');\n    timer = process.hrtime();\n  }\n\n  assert.equal(data.length, message_size, 'message-size did not match');\n  if (++counter === message_count) finish();\n})\n\nfunction finish(){\n  var endtime = process.hrtime(timer);\n  var sec = endtime[0] + (endtime[1]/1000000000);\n  var throughput = message_count / sec;\n  var megabits = (throughput * message_size * 8) / 1000000;\n\n  console.log('message size: %d [B]', message_size);\n  console.log('message count: %d', message_count);\n  console.log('mean throughput: %d [msg/s]', throughput.toFixed(0));\n  console.log('mean throughput: %d [Mbit/s]', megabits.toFixed(0));\n  console.log('overall time: %d secs and %d nanoseconds', endtime[0], endtime[1]);\n  sock.close();\n}\n","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/perf/remote_lat.js":"var zmq = require('../');\nvar assert = require('assert');\n\nif (process.argv.length != 5) {\n  console.log('usage: remote_lat <connect-to> <message-size> <roundtrip-count>');\n  process.exit(1);\n}\n\nvar connect_to = process.argv[2];\nvar message_size = Number(process.argv[3]);\nvar roundtrip_count = Number(process.argv[4]);\nvar message = new Buffer(message_size);\nmessage.fill('h');\n\nvar recvCounter = 0;\n\nvar req = zmq.socket('req');\nreq.connect(connect_to);\n\nvar timer;\n\nreq.on('message', function (data) {\n  if (!timer) {\n    console.log('started receiving');\n    timer = process.hrtime();\n  }\n\n  assert.equal(data.length, message_size, 'message-size did not match');\n\n  if (++recvCounter === roundtrip_count) {\n    finish();\n  } else {\n    send();\n  }\n});\n\nfunction finish() {\n  var duration = process.hrtime(timer);\n  var millis = duration[0] * 1000 + duration[1] / 1000000;\n\n  console.log('message size: %d [B]', message_size);\n  console.log('roundtrip count: %d', roundtrip_count);\n  console.log('mean latency: %d [msecs]', millis / (roundtrip_count * 2));\n  console.log('overall time: %d secs and %d nanoseconds', duration[0], duration[1]);\n  req.close()\n}\n\nfunction send() {\n  req.send(message);\n}\n\nsend()\n","/home/travis/build/npmtest/node-npmtest-zmq/node_modules/zmq/perf/remote_thr.js":"var zmq = require('../')\nvar assert = require('assert')\n\nif (process.argv.length != 5) {\n  console.log('usage: remote_thr <bind-to> <message-size> <message-count>')\n  process.exit(1)\n}\n\nvar connect_to = process.argv[2]\nvar message_size = Number(process.argv[3])\nvar message_count = Number(process.argv[4])\nvar message = new Buffer(message_size)\nmessage.fill('h')\n\nvar counter = 0\n\nvar sock = zmq.socket('push')\n//sock.setsockopt(zmq.ZMQ_SNDHWM, message_count);\nsock.connect(connect_to)\n\nfunction send(){\n  for (var i = 0; i < message_count; i++) {\n    sock.send(message)\n  }\n\n  // all messages may not be received by local_thr if closed immediately\n  setTimeout(function () {\n    sock.close()\n  }, 1000);\n}\n\n// because of what seems to be a bug in node-zmq, we would lose messages\n// if we start sending immediately after calling connect(), so to make this\n// benchmark behave well, we wait a bit...\n\nsetTimeout(send, 1000);\n\n"}